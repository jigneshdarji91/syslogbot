{
  "name": "slack",
  "version": "7.7.3",
  "description": "Slack API client written in JS",
  "main": "methods/index",
  "browser": {
    "./methods/_exec.js": "./methods/_exec-browser.js",
    "./methods/rtm.client.js": "./methods/rtm.client-browser.js",
    "./test/_env.js": "./test/_env-browser.js"
  },
  "scripts": {
    "start": "npm run build && ./scripts/repl",
    "build": "rimraf methods && babel src --out-dir methods && cpr src/api.json methods/api.json",
    "test": "npm run build && ./scripts/test",
    "btest": "npm run build && ./scripts/test-browser | browser-run | tap-spec",
    "prepublish": "npm run build",
    "generate": "./scripts/generate-all"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/smallwins/slack.git"
  },
  "keywords": [
    "slack",
    "api",
    "client"
  ],
  "author": {
    "name": "Brian LeRoux",
    "email": "b@brian.io"
  },
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/smallwins/slack/issues"
  },
  "homepage": "https://github.com/smallwins/slack#readme",
  "devDependencies": {
    "babel-cli": "^6.3.15",
    "babel-plugin-add-module-exports": "^0.1.1",
    "babel-preset-es2015": "^6.3.13",
    "babelify": "^7.2.0",
    "browser-run": "^3.0.5",
    "browserify": "^13.0.1",
    "chalk": "^1.1.1",
    "cheerio": "^0.20.0",
    "cpr": "^1.1.2",
    "envify": "^3.4.0",
    "glob": "^7.0.5",
    "lodash": "^4.5.0",
    "mustache": "^2.2.1",
    "node-env-file": "^0.1.8",
    "rimraf": "^2.5.3",
    "tap": "^5.8.0",
    "tap-spec": "^4.1.1",
    "tape": "^4.6.0"
  },
  "dependencies": {
    "httpplease": "^0.16.4",
    "query-string": "^4.2.2",
    "request": "^2.72.0",
    "ws": "^1.1.1"
  },
  "readme": "<p align=\"center\">\n  <img width=\"333px\" src=https://s3-us-west-1.amazonaws.com/bugbot/slack-js.svg>\n</p>\n\n[![npm](https://badge.fury.io/js/slack.svg)](https://www.npmjs.com/package/slack) [![bitHound Code](https://www.bithound.io/github/smallwins/slack/badges/code.svg)](https://www.bithound.io/github/smallwins/slack) [![bitHound Dependencies](https://www.bithound.io/github/smallwins/slack/badges/dependencies.svg)](https://www.bithound.io/github/smallwins/slack/master/dependencies/npm) [![Codeship CI](https://img.shields.io/codeship/3fd641e0-81f4-0133-c733-22940a7a47c6.svg)](https://codeship.com/projects/121411) [![Apache 2.0](https://img.shields.io/badge/license-Apache 2.0-blue.svg)](https://github.com/smallwins/slack/blob/master/LICENSE)\n\n### Slack [Web](https://api.slack.com/methods) and [RTM](https://api.slack.com/rtm) API client. :seedling::raised_hands::two_hearts:\n\n- Written in ES2015 JS, published as ES5, tested for Node and the browser\n- Web API is all pure functions *(no stateful things like classes or using `new`)*\n- RTM API has a thin wrapper for `WebSocket` *(also tested for Node and the browser!)*\n- Perfect symmetry *(low level: method signatures match API docs method signatures are node-style callbacks)*\n- Opt in *(selectively use the parts of the api surface you want without the entire payload)*\n- Well tested, CI, and Apache2 licensed\n\n## Install :star2::package:\n\n```\nnpm i slack\n```\n\n# Usage :sparkles::rocket:\n\n`slack` is tested for Node and the browser.\n\n```javascript\nvar slack = require('slack')\n\n// logs {args:{hello:'world'}}\nslack.api.test({hello:'world'}, console.log)\n```\n\nUsage with ES2015 works well too; `slack` itself is written with [Babel](http://babeljs.io/). You can also specify only the methods you need which can trim the payload if you are using `slack` in the browser.\n\n```javascript\n// only import the specific method you need\nimport test from 'slack/methods/api.test'\n\n// logs {args:{hyper:'card'}}\ntest({hyper:'card'}, console.log)\n```\n\nStarting an RTM session:\n\n```javascript\nimport slack from 'slack'\n\nlet bot = slack.rtm.client()\nlet token = process.env.SLACK_TOKEN\n\nbot.hello(message=> {\n  console.log(`Got a message: ${message}`)\n  bot.close()\n})\n\nbot.listen({token})\n```\n\nThe entire [RTM event API](https://api.slack.com/rtm) is supported.\n\n### Test Setup :lock::key::point_left:\n\nClone this repo and create a file called `.env` in the root with the following:\n\n```\nSLACK_TOKEN=xxxx\nSLACK_BOT_TOKEN=xxxx\nSLACK_CLIENT_ID=xxxx\nSLACK_CLIENT_SECRET=xxxx\n```\n\nYou can get a `SLACK_TOKEN` for testing [here](https://api.slack.com/web). You need to register an app for a `SLACK_CLIENT_ID` and `SLACK_CLIENT_SECRET`. The tests require the app to have the `channels:history` scope.\n\n## Testing :green_heart::green_heart::green_heart:\n\n:point_right: In Node:\n\n```\nnpm test\n```\n\n:point_right: Or the browser:\n\n```\nnpm run btest\n```\n\n:point_right: Or kick up a REPL and poke around:\n\n<img-src=https://s3-us-west-1.amazonaws.com/bugbot/slack-repl.png>\n\n# Slack Web API :tada::honeybee::triangular_flag_on_post:\n\nThe entire Slack Web API is supported. All method signatures accept a `params` object and Node style callback. Required params are documented inline below.\n\n- `slack.api.test({}, (err, data)=>)``\n- `slack.auth.revoke({}, (err, data)=>)``\n- `slack.auth.test({token}, (err, data)=>)``\n- `slack.bots.info({token}, (err, data)=>)``\n- `slack.channels.archive({token, channel}, (err, data)=>)``\n- `slack.channels.create({token, name}, (err, data)=>)``\n- `slack.channels.history({token, channel}, (err, data)=>)``\n- `slack.channels.info({token, channel}, (err, data)=>)``\n- `slack.channels.invite({token, channel, user}, (err, data)=>)``\n- `slack.channels.join({token, name}, (err, data)=>)``\n- `slack.channels.kick({token, channel, user}, (err, data)=>)``\n- `slack.channels.leave({token, channel}, (err, data)=>)``\n- `slack.channels.list({token}, (err, data)=>)``\n- `slack.channels.mark({token, channel, ts}, (err, data)=>)``\n- `slack.channels.rename({token, channel, name}, (err, data)=>)``\n- `slack.channels.setPurpose({token, channel, purpose}, (err, data)=>)``\n- `slack.channels.setTopic({token, channel, topic}, (err, data)=>)``\n- `slack.channels.unarchive({token, channel}, (err, data)=>)``\n- `slack.chat.delete({token, ts, channel}, (err, data)=>)``\n- `slack.chat.meMessage({token, channel, text}, (err, data)=>)``\n- `slack.chat.postMessage({token, channel, text}, (err, data)=>)``\n- `slack.chat.update({token, ts, channel, text}, (err, data)=>)``\n- `slack.dnd.endDnd({token}, (err, data)=>)``\n- `slack.dnd.endSnooze({token}, (err, data)=>)``\n- `slack.dnd.info({token}, (err, data)=>)``\n- `slack.dnd.setSnooze({token, num_minutes}, (err, data)=>)``\n- `slack.dnd.teamInfo({token}, (err, data)=>)``\n- `slack.emoji.list({token}, (err, data)=>)``\n- `slack.files.comments.add({token, file, comment}, (err, data)=>)``\n- `slack.files.comments.delete({token, file, id}, (err, data)=>)``\n- `slack.files.comments.edit({token, file, id, comment}, (err, data)=>)``\n- `slack.files.delete({token, file}, (err, data)=>)``\n- `slack.files.info({token, file}, (err, data)=>)``\n- `slack.files.list({token}, (err, data)=>)``\n- `slack.files.revokePublicURL({token, file}, (err, data)=>)``\n- `slack.files.sharedPublicURL({token, file}, (err, data)=>)``\n- `slack.files.upload({token, filename}, (err, data)=>)``\n- `slack.groups.archive({token, channel}, (err, data)=>)``\n- `slack.groups.close({token, channel}, (err, data)=>)``\n- `slack.groups.create({token, name}, (err, data)=>)``\n- `slack.groups.createChild({token, channel}, (err, data)=>)``\n- `slack.groups.history({token, channel}, (err, data)=>)``\n- `slack.groups.info({token, channel}, (err, data)=>)``\n- `slack.groups.invite({token, channel, user}, (err, data)=>)``\n- `slack.groups.kick({token, channel, user}, (err, data)=>)``\n- `slack.groups.leave({token, channel}, (err, data)=>)``\n- `slack.groups.list({token}, (err, data)=>)``\n- `slack.groups.mark({token, channel, ts}, (err, data)=>)``\n- `slack.groups.open({token, channel}, (err, data)=>)``\n- `slack.groups.rename({token, channel, name}, (err, data)=>)``\n- `slack.groups.setPurpose({token, channel, purpose}, (err, data)=>)``\n- `slack.groups.setTopic({token, channel, topic}, (err, data)=>)``\n- `slack.groups.unarchive({token, channel}, (err, data)=>)``\n- `slack.im.close({token, channel}, (err, data)=>)``\n- `slack.im.history({token, channel}, (err, data)=>)``\n- `slack.im.list({token}, (err, data)=>)``\n- `slack.im.mark({token, channel, ts}, (err, data)=>)``\n- `slack.im.open({token, user}, (err, data)=>)``\n- `slack.mpim.close({token, channel}, (err, data)=>)``\n- `slack.mpim.history({token, channel}, (err, data)=>)``\n- `slack.mpim.list({token}, (err, data)=>)``\n- `slack.mpim.mark({token, channel, ts}, (err, data)=>)``\n- `slack.mpim.open({token, users}, (err, data)=>)``\n- `slack.oauth.access({client_id, client_secret, code}, (err, data)=>)``\n- `slack.pins.add({token, channel}, (err, data)=>)``\n- `slack.pins.list({token, channel}, (err, data)=>)``\n- `slack.pins.remove({token, channel}, (err, data)=>)``\n- `slack.reactions.add({token, name}, (err, data)=>)``\n- `slack.reactions.get({token}, (err, data)=>)``\n- `slack.reactions.list({token}, (err, data)=>)``\n- `slack.reactions.remove({token, name}, (err, data)=>)``\n- `slack.reminders.add({token, text, time}, (err, data)=>)``\n- `slack.reminders.complete({token, reminder}, (err, data)=>)``\n- `slack.reminders.delete({token, reminder}, (err, data)=>)``\n- `slack.reminders.info({token, reminder}, (err, data)=>)``\n- `slack.reminders.list({token}, (err, data)=>)``\n- `slack.rtm.start({token}, (err, data)=>)``\n- `slack.search.all({token, query}, (err, data)=>)``\n- `slack.search.files({token, query}, (err, data)=>)``\n- `slack.search.messages({token, query}, (err, data)=>)``\n- `slack.stars.add({token}, (err, data)=>)``\n- `slack.stars.list({token}, (err, data)=>)``\n- `slack.stars.remove({token}, (err, data)=>)``\n- `slack.team.accessLogs({token}, (err, data)=>)``\n- `slack.team.billableInfo({token}, (err, data)=>)``\n- `slack.team.info({token}, (err, data)=>)``\n- `slack.team.integrationLogs({token}, (err, data)=>)``\n- `slack.team.profile.get({token}, (err, data)=>)``\n- `slack.usergroups.create({token, name}, (err, data)=>)``\n- `slack.usergroups.disable({token, usergroup}, (err, data)=>)``\n- `slack.usergroups.enable({token, usergroup}, (err, data)=>)``\n- `slack.usergroups.list({token}, (err, data)=>)``\n- `slack.usergroups.update({token, usergroup}, (err, data)=>)``\n- `slack.usergroups.users.list({token, usergroup}, (err, data)=>)``\n- `slack.usergroups.users.update({token, usergroup, users}, (err, data)=>)``\n- `slack.users.getPresence({token, user}, (err, data)=>)``\n- `slack.users.identity({token}, (err, data)=>)``\n- `slack.users.info({token, user}, (err, data)=>)``\n- `slack.users.list({token}, (err, data)=>)``\n- `slack.users.profile.get({token}, (err, data)=>)``\n- `slack.users.profile.set({token}, (err, data)=>)``\n- `slack.users.setActive({token}, (err, data)=>)``\n- `slack.users.setPresence({token, presence}, (err, data)=>)``\n\n# Slack RTM API\n\n`slack.rtm.client()` is a factory method that returns an thinly wrapped WebSocket instance with helpers for registering callbacks to [Slack RTM events](https://api.slack.com/events).\n\n```javascript\nvar slack = require('slack')\nvar bot = slack.rtm.client()\nvar token = process.env.SLACK_TOKEN\n\n// logs: ws, started, close, listen, etc... in addition to the RTM event handler methods\nconsole.log(Object.keys(bot))\n\n// do something with the rtm.start payload\nbot.started(function(payload) {\n  console.log('payload from rtm.start', payload)\n})\n\n// respond to a user_typing message\nbot.user_typing(function(msg) {\n  console.log('several people are coding', msg)\n})\n\n// start listening to the slack team associated to the token\nbot.listen({token:token})\n```\n\nTry it out by running `npm start`:\n\n<img src=https://s3-us-west-1.amazonaws.com/bugbot/repl-rtm.png>\n\n#### RTM Client API\n\n- `bot.ws` is a `WebSocket` instance constructed from `slack/methods/rtm.start` payload\n- `bot.started(payload=>)` fires after `rtm.start` payload response is received and socket established\n- `bot.close()` closes the `WebSocket`\n- `bot.listen({token})` initiates the `slack/methods/rtm.start` handshake and delegates all messages\n\n#### RTM Events\n\nEach of these are methods on `bot` for registering handlers for the events of the same name.\n\n- `accounts_changed`\n- `bot_added`\n- `bot_changed`\n- `channel_archive`\n- `channel_created`\n- `channel_deleted`\n- `channel_history_changed`\n- `channel_joined`\n- `channel_left`\n- `channel_marked`\n- `channel_rename`\n- `channel_unarchive`\n- `commands_changed`\n- `dnd_updated`\n- `dnd_updated_user`\n- `email_domain_changed`\n- `emoji_changed`\n- `file_change`\n- `file_comment_added`\n- `file_comment_deleted`\n- `file_comment_edited`\n- `file_created`\n- `file_deleted`\n- `file_public`\n- `file_shared`\n- `file_unshared`\n- `group_archive`\n- `group_close`\n- `group_history_changed`\n- `group_joined`\n- `group_left`\n- `group_marked`\n- `group_open`\n- `group_rename`\n- `group_unarchive`\n- `hello`\n- `im_close`\n- `im_created`\n- `im_history_changed`\n- `im_marked`\n- `im_open`\n- `manual_presence_change`\n- `message`\n- `message.channels`\n- `message.groups`\n- `message.im`\n- `message.mpim`\n- `pin_added`\n- `pin_removed`\n- `pong`\n- `pref_change`\n- `presence_change`\n- `reaction_added`\n- `reaction_removed`\n- `reconnect_url`\n- `star_added`\n- `star_removed`\n- `subteam_created`\n- `subteam_self_added`\n- `subteam_self_removed`\n- `subteam_updated`\n- `team_domain_change`\n- `team_join`\n- `team_migration_started`\n- `team_plan_change`\n- `team_pref_change`\n- `team_profile_change`\n- `team_profile_delete`\n- `team_profile_reorder`\n- `team_rename`\n- `url_verification`\n- `user_change`\n- `user_typing`\n\n\n# Contributing\n\nMost of the code for the client is generated by scraping the [Slack API documentation](https://api.slack.com/methods).\nRegenerate from the latest Slack documentation by running :runner::\n\n```\nnpm run generate\n```\n\nPortions of this README are generated as well; to make edits, update `readme.tmpl`\nand run the same command :cloud::umbrella::sunny::sunflower:.\n",
  "readmeFilename": "readme.md",
  "_id": "slack@7.7.3",
  "_shasum": "aa4447a11bf30ace054f3c6142c6941df4a2780b",
  "_from": "slack@",
  "_resolved": "https://registry.npmjs.org/slack/-/slack-7.7.3.tgz"
}
