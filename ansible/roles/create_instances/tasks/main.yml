- name: Create security group
  ec2_group:
    name: "{{ project_name }}_security_group"
    description: "{{ project_name }} security group"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: basic_firewall

# - name: Create an EC2 key
#   ec2_key:
#       name: "{{ project_name }}"
#       region: "{{ aws_region }}"
#   register: ec2_key

# - name: save private key
#   copy: content="{{ ec2_key.name }}" dest="{{ project_name }}-key.pem" mode=0600
#   when: ec2_key.changed

- name: Create an EC2 instance
  ec2:
      key_name: "{{ project_name }}"
      region: "{{ aws_region }}"
      group_id: "{{ basic_firewall.group_id }}"
      instance_type: "{{ instance_type }}"
      image: "{{ ami }}"
      wait: yes
      instance_tags:
          env: "{{ env }}"
      count_tag: env
      exact_count: 1
  register: ec2

- name: output the IP of created instance
  debug: msg="Allocated IP inside the VPC is {{ ec2.tagged_instances[0] }}"
  with_items: ec2.tagged_instances

- name: save IP to inventory file
  copy: content="zookeeper_ip:{{ ec2.tagged_instances[0].public_ip }}" dest=./{{ env }}
  with_items: ec2.tagged_instances

- name: Add IP to ec2_hosts group
  add_host: hostname="{{ ec2.tagged_instances[0].public_ip }}" groups="{{ group }}"
  with_items: ec2.tagged_instances

- name: Add instance to local host group
  local_action: lineinfile dest=ec2_hosts regexp="{{ item.public_dns_name }}" insertafter="[launched]" line="{{ item.public_dns_name }} ansible_ssh_private_key_file={{ project_name }}.pem"
  with_items: '{{ec2.instances}}'

- name: Write to inventory file
  copy: content="{{ group }} ansible_ssh_host={{ ec2.tagged_instances[0].public_ip }} ansible_ssh_user=ec2-user ansible_ssh_private_key_file={{ project_name }}" dest=./inventory
  with_items: ec2.tagged_instances

- name: Wait for SSH to come up
  wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
  with_items: '{{ec2.instances}}'

# - name: Make sure user is on server and generate ssh key for it
#   user: name={{ app_code_user }}
#       generate_ssh_key=yes

# - name: Add public keys for developers
#   authorized_key: user={{ app_code_user }}
#                   key="{{ lookup('file', item) }}"
#   with_fileglob:
#       - ../public_keys/*.pub
